// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CricketGame.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CricketMultiplayerFeature : Xunit.IClassFixture<CricketMultiplayerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CricketMultiplayer.feature"
#line hidden
        
        public CricketMultiplayerFeature(CricketMultiplayerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CricketMultiplayer", "\tIn order to allow two players to play\r\n\tAs a player\r\n\tI want to be told the maxi" +
                    "mum score.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne and PlayerTwo score is zero, when the game has started.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "PlayerOne and PlayerTwo score is zero, when the game has started.")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void PlayerOneAndPlayerTwoScoreIsZeroWhenTheGameHasStarted_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne and PlayerTwo score is zero, when the game has started.", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 10
 testRunner.When("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("PlayerOne and PlayerTwo score should be 0.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Only PlayerOne scores runs.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "Only PlayerOne scores runs.")]
        public virtual void OnlyPlayerOneScoresRuns_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Only PlayerOne scores runs.", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
testRunner.When("PlayerOne scores 4 runs and PlayerTwo scores 0 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
testRunner.Then("PlayerOne score should be 4 and PlayerTwo score should be 0.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Only PlayerTwo scores runs.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "Only PlayerTwo scores runs.")]
        public virtual void OnlyPlayerTwoScoresRuns_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Only PlayerTwo scores runs.", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
testRunner.When("PlayerOne scores 0 runs and PlayerTwo scores 4 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
testRunner.Then("PlayerOne score should be 0 and PlayerTwo score should be 4.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Only PlayerOne is able to score multiple runs.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "Only PlayerOne is able to score multiple runs.")]
        public virtual void OnlyPlayerOneIsAbleToScoreMultipleRuns_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Only PlayerOne is able to score multiple runs.", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("PlayerOne has scored 3 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
testRunner.When("PlayerOne scores 4 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
testRunner.Then("PlayerOne score should be 7.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Only PlayerTwo is able to score multiple runs.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "Only PlayerTwo is able to score multiple runs.")]
        public virtual void OnlyPlayerTwoIsAbleToScoreMultipleRuns_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Only PlayerTwo is able to score multiple runs.", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And("PlayerTwo has scored 3 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
testRunner.When("PlayerTwo scores 4 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.Then("PlayerTwo score should be 7.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne gets out.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "PlayerOne gets out.")]
        public virtual void PlayerOneGetsOut_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne gets out.", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
testRunner.And("PlayerOne has scored 3 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
testRunner.And("PlayerOne gets out.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
testRunner.When("PlayerOne scored 4 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
testRunner.Then("PlayerOne score should be 3.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerTwo gets out.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "PlayerTwo gets out.")]
        public virtual void PlayerTwoGetsOut_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerTwo gets out.", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
testRunner.And("PlayerTwo has scored 3 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
testRunner.And("PlayerTwo gets out.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
testRunner.When("PlayerTwo scored 4 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
testRunner.Then("PlayerTwo score should be 3.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne won.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "PlayerOne won.")]
        public virtual void PlayerOneWon_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne won.", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
testRunner.When("PlayerOne has scored 4 runs and PlayerTwo has scored 3 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
testRunner.Then("PlayerOne won.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerTwo won.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "PlayerTwo won.")]
        public virtual void PlayerTwoWon_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerTwo won.", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
testRunner.When("PlayerOne has scored 4 runs and PlayerTwo has scored 5 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
testRunner.Then("PlayerTwo won.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Tie.")]
        [Xunit.TraitAttribute("FeatureTitle", "CricketMultiplayer")]
        [Xunit.TraitAttribute("Description", "Tie.")]
        public virtual void Tie_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tie.", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
testRunner.Given("the cricket game has started.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
testRunner.When("PlayerOne has scored 4 runs and PlayerTwo has scored 4 runs.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
testRunner.Then("No one won.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CricketMultiplayerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CricketMultiplayerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
